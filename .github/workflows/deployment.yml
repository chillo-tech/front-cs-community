on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  NODE_VERSION: '14.x'
  FOLDER: /opt/applications/cs-community/front-cs-community
  IMAGE: simachille/chillo.tech
  IMAGE_VERSION: latest
permissions:
  contents: read

jobs:
  create-folder:
    name: Create folder
    runs-on: ubuntu-latest
    steps:
      - name: Create folder
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: ${{ secrets.PROD_APPLICATIONS_PORT }}
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          #password: ${{ secrets.PROD_APPLICATIONS_PASSWPRD }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p  ${{ env.FOLDER }}
            sudo chmod ugo+rwx  ${{ env.FOLDER }}

  copy-configs:
    name: 'copy configs'
    runs-on: ubuntu-latest
    needs: create-folder
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: ${{ secrets.PROD_APPLICATIONS_PORT }}
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          #password: ${{ secrets.PROD_APPLICATIONS_PASSWPRD }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          source: 'docker-compose.yml'
          target: ${{ env.FOLDER }}

  dockerize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{env.IMAGE}}
          outputs: type=docker,dest=/tmp/${{env.IMAGE}}.tar

  copy-image:
    name: 'copy image'
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: ${{ secrets.PROD_APPLICATIONS_PORT }}
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          #password: ${{ secrets.PROD_APPLICATIONS_PASSWPRD }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          source: /tmp/${{env.IMAGE}}.tar
          target: ${{ secrets.FOLDER }}

  load-image:
    name: Load image
    runs-on: ubuntu-latest
    needs: [copy-image]
    steps:
      - name: Load image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: ${{ secrets.PROD_APPLICATIONS_PORT }}
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          #password: ${{ secrets.PROD_APPLICATIONS_PASSWPRD }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            docker load -i ${{env.IMAGE}}.tar

  run-container:
    name: 'Run container'
    runs-on: ubuntu-latest
    needs: [dockerize, copy-configs]
    steps:
      - name: Run container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_APPLICATIONS_HOST }}
          port: ${{ secrets.PROD_APPLICATIONS_PORT }}
          username: ${{ secrets.PROD_APPLICATIONS_USERNAME }}
          #password: ${{ secrets.PROD_APPLICATIONS_PASSWPRD }}
          key: ${{ secrets.PROD_APPLICATIONS_SSH_PRIVATE_KEY }}
          script: |
            docker compose -f ${{ secrets.FOLDER }}/docker-compose.yml stop
            docker compose -f ${{ secrets.FOLDER }}/docker-compose.yml rm -f
            docker rmi ${{env.IMAGE}}.${{env.IMAGE_VERSION}}
            sudo docker compose -f ${{ secrets.FOLDER }}/docker-compose.yml up -d
